
//////////////////////////////////////////////////////////////////////////////////////////
//  This is a complete determination of the quartic and quintic points on X1(27)
//////////////////////////////////////////////////////////////////////////////////////////
 
/****************************************************************************** 
 Here is a summary of the argument.
 
 X_1(27) has genus 13, and rank 0.
 The torsion subgroup is [3, 3, 52497],
 and is generated by differences of rational points.

 There are 9 rational cusps, 3 quadratic cusps, 0 cubic cusps, 1 sextic cusp, and 
 1 degree 9 cusp.

 Working mod 5 we note that 
 there are 9 F_5 points, 12 F_25 points, 57 F_125 points, 171 F_625 points and 612 F_3125 points. 
 We compute that the images of the 171 F_625 points and the 612 F_3125 points under Abel--Jacobi
 do not meet the reduction of the global torsion. Similarly with 
 combinations of the rest of the points.
 

 Computing the inverse image of Abel-Jacobi succeeds. 

 
 
******************************************************************************/

  N := 27; 

  
  //////////////////////////////////////////////////////////////////////////////////////////
  // Equations for X1(27), from Sutherland
  //////////////////////////////////////////////////////////////////////////////////////////
  
  
  N:=27;
F:=Rationals();
R<u,v>:=AffineSpace(F,2);
X:=Curve(R,(u-1)^2*v^6+(u-1)^2*(u^3+2)*v^5-(u-1)^2*(u^5+2*u^4-2*u^3-u^2-2*u-1)*v^4+u*(u-1)*(u^6-3*u^5-4*u^4+u^3+u^2+3*u-2)*v^3+u*(u-1)*(u^2+u+1)*(3*u^4-4*u^3-2*u^2+u-1)*v^2+3*u^5*(u-1)*(u^2+u+1)*v+u^6*(u^2+u+1));
 Xp := ProjectiveClosure(X);
 
 

 ////////////////////////////////////////////////////////////////////////
  // Compute the known small degree points
  ////////////////////////////////////////////////////////////////////////  
F := Rationals();
  PP<[xx]> := PolynomialRing(F,Dimension(P)+1);
  PP := ProjectiveSpace(PP);                                         
  P1 := Curve(ProjectiveSpace(F,1));
  j1 := map<Xsm -> P1 | [xx[1],xx[10]]>;


  Pullback(j1,P1![1,0]);
  // This returns the pullback as a scheme. It is zero dimensional, and you can get the points as the components.
  cpts := Pullback(j1,P1![1,0]);
  irr := IrreducibleComponents(cpts);
  [Degree(cpt)  : cpt in irr]; 
  IsReduced(irr[1]); // its a quartic point
  RationalPoints(irr[1]);

  for x in [1..#irr] do
    RationalPoints(irr[x]);
  end for;



//points
pts:= [ [0 , -1 , 1], [0 , 1 , 0], [0 , 0 , 1], [1 , 0 , 0], [1 , 1 , 0] ];

// Verify that these generate the torsion
  p := 5;
  Cp<[T]> := Curve(Reduction(Xp,p));
    pic,mPic := ClassGroup(Cp);    
  basePt := &+Places(Cp![0 , -1 , 1]);
  divs := {@
         &+Places(Cp!pt) - Degree(&+Places(Cp!pt))*basePt
         : pt in pts @} ;  
  
  global, mGlobal := 
     sub<pic | [(Inverse(mPic))(divs[i]) : i in [1..#divs]]>;  
  Invariants(global);
    //
    //[ 3, 3, 52497 ]

  "There are", [#Places(Cp,i) : i in [1..4]], "places of degree 1, 2, 3, and 4 over F_5";   
   
//There are [ 9, 12, 57, 171 ] places of degree 1, 2, 3, and 4 over F_5
//9 rational lift




  //////////////////////////////////////////////////////////////////////
  // Compute the image of Abel--Jacobi mod 5, Quartic
  //////////////////////////////////////////////////////////////////////  
    
validQuarticImages := {@@};
  for pl in Places(Cp,4) do
      D := Divisor(pl) - Degree(pl)*basePt;
      if Inverse(mPic)(D) in global then
        validQuarticImages := 
        validQuarticImages join {@Inverse(mPic)(D)@};
      end if;
  end for;
  "There are",  #validQuarticImages, "of the other places (coming from a quartic point) are in the image of Abel--Jacobi"; 
//0


  moreValidQuarticImages := {@@};
  for p in Places(Cp, 2) do
    for q in Places(Cp, 2) do 
      D := Divisor(p) + Divisor(q) - 4*basePt;
      if Inverse(mPic)(D) in global then
        moreValidQuarticImages := 
        moreValidQuarticImages join {@Inverse(mPic)(D)@};
      end if;
    end for;
  end for;
  "There are", #moreValidQuarticImages, "of the other places (coming from two quadratics) in the image of Abel--Jacobi"; 
  //0


moreValidQuarticImages := {@@};
  for p1 in Places(Cp, 2) do
    for p2 in Places(Cp, 1) do 
        for p3 in Places(Cp, 1) do 
              D := Divisor(p1) + Divisor(p2) + Divisor(p3) - 4*basePt;
              if Inverse(mPic)(D) in global then
                moreValidQuarticImages := 
                moreValidQuarticImages join {@Inverse(mPic)(D)@};
              end if;
        end for;
    end for;
  end for;
  "There are", #moreValidQuarticImages, "of the other places (coming from a 1 degree 2 point, 2 degree 1 points) in the image of Abel--Jacobi"; 
//135
 // 3*(Binomial(9,2) + 9) = 135 confirmed



   moreValidQuarticImages := {@@};
  for p in Places(Cp, 1) do
    for q in Places(Cp, 3) do 
      D := Divisor(p) + Divisor(q) - 4*basePt;
      if Inverse(mPic)(D) in global then
        moreValidQuarticImages := 
        moreValidQuarticImages join {@Inverse(mPic)(D)@};
      end if;
    end for;
  end for;
  "There are", #moreValidQuarticImages, "of the other places (coming from two quadratics) in the image of Abel--Jacobi"; 
//0


  moreValidQuarticImages := {@@};
  for p1 in Places(Cp, 1) do
    for p2 in Places(Cp, 1) do 
        for p3 in Places(Cp, 1) do 
            for p4 in Places(Cp, 1) do 
              D := Divisor(p1) + Divisor(p2) + Divisor(p3) + Divisor(p4) - 4*basePt;
              if Inverse(mPic)(D) in global then
                moreValidQuarticImages := 
                moreValidQuarticImages join {@Inverse(mPic)(D)@};
              end if;
            end for;
        end for;
    end for;
  end for;
  "There are", #moreValidQuarticImages, "of the other places (coming from a 4 degree 1 points) in the image of Abel--Jacobi"; 
//495
//confirmed 95
  // n + k -1 choose k (picking k things from n with repitition)



  "There are", [#Places(Cp,i) : i in [1..5]], "places of degree 1, 2, 3, and 4 over F_5";  
//[ 9, 12, 57, 171, 612 ]

  //////////////////////////////////////////////////////////////////////
  // Compute the image of Abel--Jacobi mod 5, Quintic
  //////////////////////////////////////////////////////////////////////  
    

validQuinticImages := {@@};
  for pl in Places(Cp,5) do
      D := Divisor(pl) - Degree(pl)*basePt;
      if Inverse(mPic)(D) in global then
        validQuinticImages := 
        validQuinticImages join {@Inverse(mPic)(D)@};
      end if;
  end for;
  "There are",  #validQuinticImages, "of the other places (coming from a quintic point) are in the image of Abel--Jacobi"; 
//0


  validQuinticImages := {@@};
  for p in Places(Cp, 3) do
    for q in Places(Cp, 2) do 
      D := Divisor(p) + Divisor(q) - 5*basePt;
      if Inverse(mPic)(D) in global then
        validQuinticImages := 
        validQuinticImages join {@Inverse(mPic)(D)@};
      end if;
    end for;
  end for;
  "There are", #validQuinticImages, "of the other places (coming from two quadratics) in the image of Abel--Jacobi"; 
  //0


morevalidQuinticImages := {@@};
  for p1 in Places(Cp, 3) do
    for p2 in Places(Cp, 1) do 
        for p3 in Places(Cp, 1) do 
              D := Divisor(p1) + Divisor(p2) + Divisor(p3) - 5*basePt;
              if Inverse(mPic)(D) in global then
                morevalidQuinticImages := 
                morevalidQuinticImages join {@Inverse(mPic)(D)@};
              end if;
        end for;
    end for;
  end for;
  "There are", #morevalidQuinticImages, "of the other places (coming from a 1 degree 2 point, 2 degree 1 points) in the image of Abel--Jacobi"; 
//0


   moreValidQuinticImages := {@@};
  for p in Places(Cp, 1) do
    for q in Places(Cp, 4) do 
      D := Divisor(p) + Divisor(q) - 5*basePt;
      if Inverse(mPic)(D) in global then
        moreValidQuinticImages := 
        moreValidQuinticImages join {@Inverse(mPic)(D)@};
      end if;
    end for;
  end for;
  "There are", #moreValidQuinticImages, "of the other places (coming from two quadratics) in the image of Abel--Jacobi"; 
//0


  moreValidQuinticImages := {@@};
  for p1 in Places(Cp, 2) do
    for p2 in Places(Cp, 1) do 
        for p3 in Places(Cp, 1) do 
            for p4 in Places(Cp, 1) do 
                  D := Divisor(p1) + Divisor(p2) + Divisor(p3) + Divisor(p4) - 5*basePt;
                if Inverse(mPic)(D) in global then
                  moreValidQuinticImages := 
                  moreValidQuinticImages join {@Inverse(mPic)(D)@};
                end if;
            end for;
        end for;
    end for;
  end for;
  "There are", #moreValidQuinticImages, "of the other places (coming from a 4 degree 1 points) in the image of Abel--Jacobi"; 

//495
//should be 3*(9+3-1 choose 3) = 495



  moreValidQuinticImages := {@@};
  for p1 in Places(Cp, 1) do
    for p2 in Places(Cp, 1) do 
        for p3 in Places(Cp, 1) do 
            for p4 in Places(Cp, 1) do 
              for p5 in Places(Cp, 1) do 
                  D := Divisor(p1) + Divisor(p2) + Divisor(p3) + Divisor(p4) + Divisor(p5) - 5*basePt;
                if Inverse(mPic)(D) in global then
                  moreValidQuinticImages := 
                  moreValidQuinticImages join {@Inverse(mPic)(D)@};
                end if;
              end for;
            end for;
        end for;
    end for;
  end for;
  "There are", #moreValidQuinticImages, "of the other places (coming from a 4 degree 1 points) in the image of Abel--Jacobi"; 
  //1287

  //should be 9 +5-1 choose 5 = 1287  

